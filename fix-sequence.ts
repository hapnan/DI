import { Pool } from "pg";

const DATABASE_URL = process.env.DATABASE_URL!;

async function fixSequence() {
  const conn = new Pool({ connectionString: DATABASE_URL });

  try {
    console.log("🔍 Checking database state...");

    // Check if sequence exists
    const seqCheck = await conn.query(`
      SELECT EXISTS (
        SELECT 1 FROM pg_class WHERE relname = 'DI_weekly_limits_id_seq'
      ) as exists;
    `);
    const seqExists = seqCheck.rows[0]?.exists;
    console.log(`Sequence exists: ${seqExists}`);

    // Check if table exists
    const tableCheck = await conn.query(`
      SELECT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'DI_weekly_limits'
      ) as exists;
    `);
    const tableExists = tableCheck.rows[0]?.exists;
    console.log(`Table exists: ${tableExists}`);

    if (seqExists && tableExists) {
      console.log("\n🔧 Fixing sequence conflict...");

      // Remove the default value first
      await conn.query(`
        ALTER TABLE "DI_weekly_limits" ALTER COLUMN "id" DROP DEFAULT;
      `);
      console.log("✓ Removed default value from id column");

      // Drop the sequence
      await conn.query(`
        DROP SEQUENCE IF EXISTS "DI_weekly_limits_id_seq" CASCADE;
      `);
      console.log("✓ Dropped old sequence");

      // Check current max id
      const maxIdResult = await conn.query(`
        SELECT COALESCE(MAX(id), 0) as max_id FROM "DI_weekly_limits";
      `);
      const maxId = maxIdResult.rows[0]?.max_id ?? 0;
      console.log(`✓ Current max ID: ${maxId}`);

      // Recreate as identity column (this creates a new sequence automatically)
      await conn.query(`
        ALTER TABLE "DI_weekly_limits" 
        ALTER COLUMN "id" 
        ADD GENERATED BY DEFAULT AS IDENTITY (START WITH ${maxId + 1});
      `);
      console.log(
        "✓ Recreated id column with GENERATED BY DEFAULT AS IDENTITY",
      );

      console.log("\n✅ Sequence conflict fixed successfully!");
      console.log("\n💡 You can now run: bun db:push");
    } else {
      console.log("\n⚠️  No conflict found. State:");
      console.log(`  - Sequence: ${seqExists ? "exists" : "missing"}`);
      console.log(`  - Table: ${tableExists ? "exists" : "missing"}`);
    }
  } catch (error) {
    console.error(
      "\n❌ Error:",
      error instanceof Error ? error.message : String(error),
    );
    throw error;
  } finally {
    await conn.end();
  }
}

fixSequence().catch((err) => {
  console.error("Failed to fix sequence:", err);
  process.exit(1);
});
